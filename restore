#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export PATH="${DIR}:${PATH}"

if [[ -z "$(command -v jq)" ]] ; then
  echo "jq not found"
  exit 1
fi

tf_output=$(terraform output -json)

export AWS_REGION
AWS_REGION=$(echo "${tf_output}" | jq -r '.aws_region.value')
export AWS_PROFILE
AWS_PROFILE=$(echo "${tf_output}" | jq -r '.backup_profile.value')

state_machine_arn=$(echo "${tf_output}" | jq -r '.state_machine_arn.value')


start_execution() {
  local state_machine_arn="${1}"
  aws stepfunctions start-execution \
    --state-machine-arn "${state_machine_arn}" \
    | jq -r '.executionArn'
}

get_state_entered() {
  local execution_arn="${1}"
  aws stepfunctions get-execution-history \
    --execution-arn "${execution_arn}" \
    --reverse-order \
    --max-items 1 \
    | jq -r '.events[] | .stateEnteredEventDetails? | .name'
}

get_stop_date() {
  local execution_arn="${1}"
  aws stepfunctions describe-execution \
    --execution-arn "${execution_arn}" \
    | jq -r '.stopDate'
}

get_execution_failed_cause() {
  local execution_arn="${1}"
  aws stepfunctions get-execution-history \
    --execution-arn "${execution_arn}" \
    --reverse-order \
    --max-items 1 \
    | jq -r '.events[] | .executionFailedEventDetails? | .cause'
}

get_succeeded_event() {
  local execution_arn="${1}"
  aws stepfunctions get-execution-history \
    --execution-arn "${execution_arn}" \
    --reverse-order \
    --max-items 1 \
    | jq -r '.events[] | .executionSucceededEventDetails? | .output'
}

get_endpoint_address() {
  local db_instance_identifier="${1}"
  aws rds describe-db-instances \
    --db-instance-identifier "${db_instance_identifier}" \
    | jq -r '.DBInstances | first | .Endpoint.Address'
}

execution_arn=$(start_execution "${state_machine_arn}")
echo "Starting: ${execution_arn} ..."

while true; do
  state_entered=$(get_state_entered "${execution_arn}")
  stop_date=$(get_stop_date "${execution_arn}")

  if [[ -n "${state_entered}" ]] && [[ "${state_entered}" != "null" ]] ; then
    echo "${state_entered}"
  fi
  if [[ -n "${stop_date}" ]] && [[ "${stop_date}" != "null" ]] ; then
    break
  fi

  sleep 60
done

failed_cause=$(get_execution_failed_cause "${execution_arn}")
if [[ -n "${failed_cause}" ]] && [[ "${failed_cause}" != "null" ]] ; then
  echo "${failed_cause}"
fi

succeeded_event=$(get_succeeded_event "${execution_arn}")
if [[ -n "${succeeded_event}" ]] && [[ "${succeeded_event}" != "null" ]] ; then
  db_instance_identifier="$(echo "${succeeded_event}" | jq -r '.db_instance_identifier')"
  endpoint="$(get_endpoint_address "${db_instance_identifier}")"
  echo "Endpoint: ${endpoint}"
fi

echo "Done!"
